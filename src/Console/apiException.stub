<?php

namespace App\Exceptions;

use App\MessagingApi\MethodsEnum;
use Exception;
use GuzzleHttp\{
    Exception\RequestException,
    Psr7
};
use Illuminate\Http\Request;
use Leavingstone\MessagingApi\Util\ResponseObject;
use Throwable;

class ApiException extends Exception
{
    protected $description;
    public function __construct(string $message = "", int $code = 0, Throwable $previous = null)
    {
        $this->description = $message;
        parent::__construct($message, $code, $previous);
    }
    public function getDescription() {
        return $this->description;
    }

    /**
     * Report the exception.
     *
     * @return void
     */
    public function report()
    {
        //
    }

    /**
     * Render the exception into an HTTP response.
     *
     * @param  \Illuminate\Http\Request
     * @return array
     */
    public function render($request)
    {
        $message = ($this->getDescription());
        if (json_last_error() !== JSON_ERROR_NONE) {
            $message = $this->getDescription();
        }
        return $this->messagingResponse($this->getCode(), $message, $request);
    }
    /**
     * @param Request $request
     * @param $errorCode
     * @param $message
     * @return array
     */
    protected function messagingResponse($errorCode, $message, $request)
    {
        $messageId = is_null($request->input('messageId')) ? str_random() : $request->input('messageId');
        $requestMethod = $request->get('method');
        return (new ResponseObject(
            MethodsEnum::getResultMethod($requestMethod),
            $messageId,
            $message,
            $errorCode
        ))->get();
    }
}
